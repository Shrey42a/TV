{
  "version": 3,
  "sources": ["../../normalizr/dist/normalizr.es.js"],
  "sourcesContent": ["function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\n/**\n * Helpers to enable Immutable compatibility *without* bringing in\n * the 'immutable' package as a dependency.\n */\n\n/**\n * Check if an object is immutable by checking if it has a key specific\n * to the immutable library.\n *\n * @param  {any} object\n * @return {bool}\n */\nfunction isImmutable(object) {\n  return !!(object && typeof object.hasOwnProperty === 'function' && (object.hasOwnProperty('__ownerID') || // Immutable.Map\n  object._map && object._map.hasOwnProperty('__ownerID'))); // Immutable.Record\n}\n/**\n * Denormalize an immutable entity.\n *\n * @param  {Schema} schema\n * @param  {Immutable.Map|Immutable.Record} input\n * @param  {function} unvisit\n * @param  {function} getDenormalizedEntity\n * @return {Immutable.Map|Immutable.Record}\n */\n\nfunction denormalizeImmutable(schema, input, unvisit) {\n  return Object.keys(schema).reduce(function (object, key) {\n    // Immutable maps cast keys to strings on write so we need to ensure\n    // we're accessing them using string keys.\n    var stringKey = \"\" + key;\n\n    if (object.has(stringKey)) {\n      return object.set(stringKey, unvisit(object.get(stringKey), schema[stringKey]));\n    } else {\n      return object;\n    }\n  }, input);\n}\n\nvar getDefaultGetId = function getDefaultGetId(idAttribute) {\n  return function (input) {\n    return isImmutable(input) ? input.get(idAttribute) : input[idAttribute];\n  };\n};\n\nvar EntitySchema = /*#__PURE__*/function () {\n  function EntitySchema(key, definition, options) {\n    if (definition === void 0) {\n      definition = {};\n    }\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!key || typeof key !== 'string') {\n      throw new Error(\"Expected a string key for Entity, but found \" + key + \".\");\n    }\n\n    var _options = options,\n        _options$idAttribute = _options.idAttribute,\n        idAttribute = _options$idAttribute === void 0 ? 'id' : _options$idAttribute,\n        _options$mergeStrateg = _options.mergeStrategy,\n        mergeStrategy = _options$mergeStrateg === void 0 ? function (entityA, entityB) {\n      return _extends({}, entityA, entityB);\n    } : _options$mergeStrateg,\n        _options$processStrat = _options.processStrategy,\n        processStrategy = _options$processStrat === void 0 ? function (input) {\n      return _extends({}, input);\n    } : _options$processStrat,\n        _options$fallbackStra = _options.fallbackStrategy,\n        fallbackStrategy = _options$fallbackStra === void 0 ? function (key, schema) {\n      return undefined;\n    } : _options$fallbackStra;\n    this._key = key;\n    this._getId = typeof idAttribute === 'function' ? idAttribute : getDefaultGetId(idAttribute);\n    this._idAttribute = idAttribute;\n    this._mergeStrategy = mergeStrategy;\n    this._processStrategy = processStrategy;\n    this._fallbackStrategy = fallbackStrategy;\n    this.define(definition);\n  }\n\n  var _proto = EntitySchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = Object.keys(definition).reduce(function (entitySchema, key) {\n      var _extends2;\n\n      var schema = definition[key];\n      return _extends({}, entitySchema, (_extends2 = {}, _extends2[key] = schema, _extends2));\n    }, this.schema || {});\n  };\n\n  _proto.getId = function getId(input, parent, key) {\n    return this._getId(input, parent, key);\n  };\n\n  _proto.merge = function merge(entityA, entityB) {\n    return this._mergeStrategy(entityA, entityB);\n  };\n\n  _proto.fallback = function fallback(id, schema) {\n    return this._fallbackStrategy(id, schema);\n  };\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    var id = this.getId(input, parent, key);\n    var entityType = this.key;\n\n    if (!(entityType in visitedEntities)) {\n      visitedEntities[entityType] = {};\n    }\n\n    if (!(id in visitedEntities[entityType])) {\n      visitedEntities[entityType][id] = [];\n    }\n\n    if (visitedEntities[entityType][id].some(function (entity) {\n      return entity === input;\n    })) {\n      return id;\n    }\n\n    visitedEntities[entityType][id].push(input);\n\n    var processedEntity = this._processStrategy(input, parent, key);\n\n    Object.keys(this.schema).forEach(function (key) {\n      if (processedEntity.hasOwnProperty(key) && typeof processedEntity[key] === 'object') {\n        var schema = _this.schema[key];\n        var resolvedSchema = typeof schema === 'function' ? schema(input) : schema;\n        processedEntity[key] = visit(processedEntity[key], processedEntity, key, resolvedSchema, addEntity, visitedEntities);\n      }\n    });\n    addEntity(this, processedEntity, input, parent, key);\n    return id;\n  };\n\n  _proto.denormalize = function denormalize(entity, unvisit) {\n    var _this2 = this;\n\n    if (isImmutable(entity)) {\n      return denormalizeImmutable(this.schema, entity, unvisit);\n    }\n\n    Object.keys(this.schema).forEach(function (key) {\n      if (entity.hasOwnProperty(key)) {\n        var schema = _this2.schema[key];\n        entity[key] = unvisit(entity[key], schema);\n      }\n    });\n    return entity;\n  };\n\n  _createClass(EntitySchema, [{\n    key: \"key\",\n    get: function get() {\n      return this._key;\n    }\n  }, {\n    key: \"idAttribute\",\n    get: function get() {\n      return this._idAttribute;\n    }\n  }]);\n\n  return EntitySchema;\n}();\n\nvar PolymorphicSchema = /*#__PURE__*/function () {\n  function PolymorphicSchema(definition, schemaAttribute) {\n    if (schemaAttribute) {\n      this._schemaAttribute = typeof schemaAttribute === 'string' ? function (input) {\n        return input[schemaAttribute];\n      } : schemaAttribute;\n    }\n\n    this.define(definition);\n  }\n\n  var _proto = PolymorphicSchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = definition;\n  };\n\n  _proto.getSchemaAttribute = function getSchemaAttribute(input, parent, key) {\n    return !this.isSingleSchema && this._schemaAttribute(input, parent, key);\n  };\n\n  _proto.inferSchema = function inferSchema(input, parent, key) {\n    if (this.isSingleSchema) {\n      return this.schema;\n    }\n\n    var attr = this.getSchemaAttribute(input, parent, key);\n    return this.schema[attr];\n  };\n\n  _proto.normalizeValue = function normalizeValue(value, parent, key, visit, addEntity, visitedEntities) {\n    var schema = this.inferSchema(value, parent, key);\n\n    if (!schema) {\n      return value;\n    }\n\n    var normalizedValue = visit(value, parent, key, schema, addEntity, visitedEntities);\n    return this.isSingleSchema || normalizedValue === undefined || normalizedValue === null ? normalizedValue : {\n      id: normalizedValue,\n      schema: this.getSchemaAttribute(value, parent, key)\n    };\n  };\n\n  _proto.denormalizeValue = function denormalizeValue(value, unvisit) {\n    var schemaKey = isImmutable(value) ? value.get('schema') : value.schema;\n\n    if (!this.isSingleSchema && !schemaKey) {\n      return value;\n    }\n\n    var id = this.isSingleSchema ? undefined : isImmutable(value) ? value.get('id') : value.id;\n    var schema = this.isSingleSchema ? this.schema : this.schema[schemaKey];\n    return unvisit(id || value, schema);\n  };\n\n  _createClass(PolymorphicSchema, [{\n    key: \"isSingleSchema\",\n    get: function get() {\n      return !this._schemaAttribute;\n    }\n  }]);\n\n  return PolymorphicSchema;\n}();\n\nvar UnionSchema = /*#__PURE__*/function (_PolymorphicSchema) {\n  _inheritsLoose(UnionSchema, _PolymorphicSchema);\n\n  function UnionSchema(definition, schemaAttribute) {\n    if (!schemaAttribute) {\n      throw new Error('Expected option \"schemaAttribute\" not found on UnionSchema.');\n    }\n\n    return _PolymorphicSchema.call(this, definition, schemaAttribute) || this;\n  }\n\n  var _proto = UnionSchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    return this.normalizeValue(input, parent, key, visit, addEntity, visitedEntities);\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    return this.denormalizeValue(input, unvisit);\n  };\n\n  return UnionSchema;\n}(PolymorphicSchema);\n\nvar ValuesSchema = /*#__PURE__*/function (_PolymorphicSchema) {\n  _inheritsLoose(ValuesSchema, _PolymorphicSchema);\n\n  function ValuesSchema() {\n    return _PolymorphicSchema.apply(this, arguments) || this;\n  }\n\n  var _proto = ValuesSchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    return Object.keys(input).reduce(function (output, key, index) {\n      var _extends2;\n\n      var value = input[key];\n      return value !== undefined && value !== null ? _extends({}, output, (_extends2 = {}, _extends2[key] = _this.normalizeValue(value, input, key, visit, addEntity, visitedEntities), _extends2)) : output;\n    }, {});\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    var _this2 = this;\n\n    return Object.keys(input).reduce(function (output, key) {\n      var _extends3;\n\n      var entityOrId = input[key];\n      return _extends({}, output, (_extends3 = {}, _extends3[key] = _this2.denormalizeValue(entityOrId, unvisit), _extends3));\n    }, {});\n  };\n\n  return ValuesSchema;\n}(PolymorphicSchema);\n\nvar validateSchema = function validateSchema(definition) {\n  var isArray = Array.isArray(definition);\n\n  if (isArray && definition.length > 1) {\n    throw new Error(\"Expected schema definition to be a single schema, but found \" + definition.length + \".\");\n  }\n\n  return definition[0];\n};\n\nvar getValues = function getValues(input) {\n  return Array.isArray(input) ? input : Object.keys(input).map(function (key) {\n    return input[key];\n  });\n};\n\nvar normalize = function normalize(schema, input, parent, key, visit, addEntity, visitedEntities) {\n  schema = validateSchema(schema);\n  var values = getValues(input); // Special case: Arrays pass *their* parent on to their children, since there\n  // is not any special information that can be gathered from themselves directly\n\n  return values.map(function (value, index) {\n    return visit(value, parent, key, schema, addEntity, visitedEntities);\n  });\n};\nvar denormalize = function denormalize(schema, input, unvisit) {\n  schema = validateSchema(schema);\n  return input && input.map ? input.map(function (entityOrId) {\n    return unvisit(entityOrId, schema);\n  }) : input;\n};\n\nvar ArraySchema = /*#__PURE__*/function (_PolymorphicSchema) {\n  _inheritsLoose(ArraySchema, _PolymorphicSchema);\n\n  function ArraySchema() {\n    return _PolymorphicSchema.apply(this, arguments) || this;\n  }\n\n  var _proto = ArraySchema.prototype;\n\n  _proto.normalize = function normalize(input, parent, key, visit, addEntity, visitedEntities) {\n    var _this = this;\n\n    var values = getValues(input);\n    return values.map(function (value, index) {\n      return _this.normalizeValue(value, parent, key, visit, addEntity, visitedEntities);\n    }).filter(function (value) {\n      return value !== undefined && value !== null;\n    });\n  };\n\n  _proto.denormalize = function denormalize(input, unvisit) {\n    var _this2 = this;\n\n    return input && input.map ? input.map(function (value) {\n      return _this2.denormalizeValue(value, unvisit);\n    }) : input;\n  };\n\n  return ArraySchema;\n}(PolymorphicSchema);\n\nvar _normalize = function normalize(schema, input, parent, key, visit, addEntity, visitedEntities) {\n  var object = _extends({}, input);\n\n  Object.keys(schema).forEach(function (key) {\n    var localSchema = schema[key];\n    var resolvedLocalSchema = typeof localSchema === 'function' ? localSchema(input) : localSchema;\n    var value = visit(input[key], input, key, resolvedLocalSchema, addEntity, visitedEntities);\n\n    if (value === undefined || value === null) {\n      delete object[key];\n    } else {\n      object[key] = value;\n    }\n  });\n  return object;\n};\n\nvar _denormalize = function denormalize(schema, input, unvisit) {\n  if (isImmutable(input)) {\n    return denormalizeImmutable(schema, input, unvisit);\n  }\n\n  var object = _extends({}, input);\n\n  Object.keys(schema).forEach(function (key) {\n    if (object[key] != null) {\n      object[key] = unvisit(object[key], schema[key]);\n    }\n  });\n  return object;\n};\n\nvar ObjectSchema = /*#__PURE__*/function () {\n  function ObjectSchema(definition) {\n    this.define(definition);\n  }\n\n  var _proto = ObjectSchema.prototype;\n\n  _proto.define = function define(definition) {\n    this.schema = Object.keys(definition).reduce(function (entitySchema, key) {\n      var _extends2;\n\n      var schema = definition[key];\n      return _extends({}, entitySchema, (_extends2 = {}, _extends2[key] = schema, _extends2));\n    }, this.schema || {});\n  };\n\n  _proto.normalize = function normalize() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _normalize.apply(void 0, [this.schema].concat(args));\n  };\n\n  _proto.denormalize = function denormalize() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return _denormalize.apply(void 0, [this.schema].concat(args));\n  };\n\n  return ObjectSchema;\n}();\n\nvar visit = function visit(value, parent, key, schema, addEntity, visitedEntities) {\n  if (typeof value !== 'object' || !value) {\n    return value;\n  }\n\n  if (typeof schema === 'object' && (!schema.normalize || typeof schema.normalize !== 'function')) {\n    var method = Array.isArray(schema) ? normalize : _normalize;\n    return method(schema, value, parent, key, visit, addEntity, visitedEntities);\n  }\n\n  return schema.normalize(value, parent, key, visit, addEntity, visitedEntities);\n};\n\nvar addEntities = function addEntities(entities) {\n  return function (schema, processedEntity, value, parent, key) {\n    var schemaKey = schema.key;\n    var id = schema.getId(value, parent, key);\n\n    if (!(schemaKey in entities)) {\n      entities[schemaKey] = {};\n    }\n\n    var existingEntity = entities[schemaKey][id];\n\n    if (existingEntity) {\n      entities[schemaKey][id] = schema.merge(existingEntity, processedEntity);\n    } else {\n      entities[schemaKey][id] = processedEntity;\n    }\n  };\n};\n\nvar schema = {\n  Array: ArraySchema,\n  Entity: EntitySchema,\n  Object: ObjectSchema,\n  Union: UnionSchema,\n  Values: ValuesSchema\n};\nvar normalize$1 = function normalize(input, schema) {\n  if (!input || typeof input !== 'object') {\n    throw new Error(\"Unexpected input given to normalize. Expected type to be \\\"object\\\", found \\\"\" + (input === null ? 'null' : typeof input) + \"\\\".\");\n  }\n\n  var entities = {};\n  var addEntity = addEntities(entities);\n  var visitedEntities = {};\n  var result = visit(input, input, null, schema, addEntity, visitedEntities);\n  return {\n    entities: entities,\n    result: result\n  };\n};\n\nvar unvisitEntity = function unvisitEntity(id, schema, unvisit, getEntity, cache) {\n  var entity = getEntity(id, schema);\n\n  if (entity === undefined && schema instanceof EntitySchema) {\n    entity = schema.fallback(id, schema);\n  }\n\n  if (typeof entity !== 'object' || entity === null) {\n    return entity;\n  }\n\n  if (!cache[schema.key]) {\n    cache[schema.key] = {};\n  }\n\n  if (!cache[schema.key][id]) {\n    // Ensure we don't mutate it non-immutable objects\n    var entityCopy = isImmutable(entity) ? entity : _extends({}, entity); // Need to set this first so that if it is referenced further within the\n    // denormalization the reference will already exist.\n\n    cache[schema.key][id] = entityCopy;\n    cache[schema.key][id] = schema.denormalize(entityCopy, unvisit);\n  }\n\n  return cache[schema.key][id];\n};\n\nvar getUnvisit = function getUnvisit(entities) {\n  var cache = {};\n  var getEntity = getEntities(entities);\n  return function unvisit(input, schema) {\n    if (typeof schema === 'object' && (!schema.denormalize || typeof schema.denormalize !== 'function')) {\n      var method = Array.isArray(schema) ? denormalize : _denormalize;\n      return method(schema, input, unvisit);\n    }\n\n    if (input === undefined || input === null) {\n      return input;\n    }\n\n    if (schema instanceof EntitySchema) {\n      return unvisitEntity(input, schema, unvisit, getEntity, cache);\n    }\n\n    return schema.denormalize(input, unvisit);\n  };\n};\n\nvar getEntities = function getEntities(entities) {\n  var isImmutable$1 = isImmutable(entities);\n  return function (entityOrId, schema) {\n    var schemaKey = schema.key;\n\n    if (typeof entityOrId === 'object') {\n      return entityOrId;\n    }\n\n    if (isImmutable$1) {\n      return entities.getIn([schemaKey, entityOrId.toString()]);\n    }\n\n    return entities[schemaKey] && entities[schemaKey][entityOrId];\n  };\n};\n\nvar denormalize$1 = function denormalize(input, schema, entities) {\n  if (typeof input !== 'undefined') {\n    return getUnvisit(entities)(input, schema);\n  }\n};\n\nexport { denormalize$1 as denormalize, normalize$1 as normalize, schema };\n"],
  "mappings": ";;;AAAA,SAAS,kBAAkB,QAAQ,OAAO;AACxC,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,QAAI,aAAa,MAAM;AACvB,eAAW,aAAa,WAAW,cAAc;AACjD,eAAW,eAAe;AAC1B,QAAI,WAAW;AAAY,iBAAW,WAAW;AACjD,WAAO,eAAe,QAAQ,WAAW,KAAK,UAAU;AAAA,EAC1D;AACF;AAEA,SAAS,aAAa,aAAa,YAAY,aAAa;AAC1D,MAAI;AAAY,sBAAkB,YAAY,WAAW,UAAU;AACnE,MAAI;AAAa,sBAAkB,aAAa,WAAW;AAC3D,SAAO;AACT;AAEA,SAAS,WAAW;AAClB,aAAW,OAAO,UAAU,SAAU,QAAQ;AAC5C,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,UAAI,SAAS,UAAU;AAEvB,eAAS,OAAO,QAAQ;AACtB,YAAI,OAAO,UAAU,eAAe,KAAK,QAAQ,GAAG,GAAG;AACrD,iBAAO,OAAO,OAAO;AAAA,QACvB;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAEA,SAAO,SAAS,MAAM,MAAM,SAAS;AACvC;AAEA,SAAS,eAAe,UAAU,YAAY;AAC5C,WAAS,YAAY,OAAO,OAAO,WAAW,SAAS;AACvD,WAAS,UAAU,cAAc;AACjC,WAAS,YAAY;AACvB;AAcA,SAAS,YAAY,QAAQ;AAC3B,SAAO,CAAC,EAAE,UAAU,OAAO,OAAO,mBAAmB,eAAe,OAAO,eAAe,WAAW,KACrG,OAAO,QAAQ,OAAO,KAAK,eAAe,WAAW;AACvD;AAWA,SAAS,qBAAqBA,SAAQ,OAAO,SAAS;AACpD,SAAO,OAAO,KAAKA,OAAM,EAAE,OAAO,SAAU,QAAQ,KAAK;AAGvD,QAAI,YAAY,KAAK;AAErB,QAAI,OAAO,IAAI,SAAS,GAAG;AACzB,aAAO,OAAO,IAAI,WAAW,QAAQ,OAAO,IAAI,SAAS,GAAGA,QAAO,UAAU,CAAC;AAAA,IAChF,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF,GAAG,KAAK;AACV;AAEA,IAAI,kBAAkB,SAASC,iBAAgB,aAAa;AAC1D,SAAO,SAAU,OAAO;AACtB,WAAO,YAAY,KAAK,IAAI,MAAM,IAAI,WAAW,IAAI,MAAM;AAAA,EAC7D;AACF;AAEA,IAAI,eAA4B,WAAY;AAC1C,WAASC,cAAa,KAAK,YAAY,SAAS;AAC9C,QAAI,eAAe,QAAQ;AACzB,mBAAa,CAAC;AAAA,IAChB;AAEA,QAAI,YAAY,QAAQ;AACtB,gBAAU,CAAC;AAAA,IACb;AAEA,QAAI,CAAC,OAAO,OAAO,QAAQ,UAAU;AACnC,YAAM,IAAI,MAAM,iDAAiD,MAAM,GAAG;AAAA,IAC5E;AAEA,QAAI,WAAW,SACX,uBAAuB,SAAS,aAChC,cAAc,yBAAyB,SAAS,OAAO,sBACvD,wBAAwB,SAAS,eACjC,gBAAgB,0BAA0B,SAAS,SAAU,SAAS,SAAS;AACjF,aAAO,SAAS,CAAC,GAAG,SAAS,OAAO;AAAA,IACtC,IAAI,uBACA,wBAAwB,SAAS,iBACjC,kBAAkB,0BAA0B,SAAS,SAAU,OAAO;AACxE,aAAO,SAAS,CAAC,GAAG,KAAK;AAAA,IAC3B,IAAI,uBACA,wBAAwB,SAAS,kBACjC,mBAAmB,0BAA0B,SAAS,SAAUC,MAAKH,SAAQ;AAC/E,aAAO;AAAA,IACT,IAAI;AACJ,SAAK,OAAO;AACZ,SAAK,SAAS,OAAO,gBAAgB,aAAa,cAAc,gBAAgB,WAAW;AAC3F,SAAK,eAAe;AACpB,SAAK,iBAAiB;AACtB,SAAK,mBAAmB;AACxB,SAAK,oBAAoB;AACzB,SAAK,OAAO,UAAU;AAAA,EACxB;AAEA,MAAI,SAASE,cAAa;AAE1B,SAAO,SAAS,SAAS,OAAO,YAAY;AAC1C,SAAK,SAAS,OAAO,KAAK,UAAU,EAAE,OAAO,SAAU,cAAc,KAAK;AACxE,UAAI;AAEJ,UAAIF,UAAS,WAAW;AACxB,aAAO,SAAS,CAAC,GAAG,eAAe,YAAY,CAAC,GAAG,UAAU,OAAOA,SAAQ,UAAU;AAAA,IACxF,GAAG,KAAK,UAAU,CAAC,CAAC;AAAA,EACtB;AAEA,SAAO,QAAQ,SAAS,MAAM,OAAO,QAAQ,KAAK;AAChD,WAAO,KAAK,OAAO,OAAO,QAAQ,GAAG;AAAA,EACvC;AAEA,SAAO,QAAQ,SAAS,MAAM,SAAS,SAAS;AAC9C,WAAO,KAAK,eAAe,SAAS,OAAO;AAAA,EAC7C;AAEA,SAAO,WAAW,SAAS,SAAS,IAAIA,SAAQ;AAC9C,WAAO,KAAK,kBAAkB,IAAIA,OAAM;AAAA,EAC1C;AAEA,SAAO,YAAY,SAASI,WAAU,OAAO,QAAQ,KAAKC,QAAO,WAAW,iBAAiB;AAC3F,QAAI,QAAQ;AAEZ,QAAI,KAAK,KAAK,MAAM,OAAO,QAAQ,GAAG;AACtC,QAAI,aAAa,KAAK;AAEtB,QAAI,EAAE,cAAc,kBAAkB;AACpC,sBAAgB,cAAc,CAAC;AAAA,IACjC;AAEA,QAAI,EAAE,MAAM,gBAAgB,cAAc;AACxC,sBAAgB,YAAY,MAAM,CAAC;AAAA,IACrC;AAEA,QAAI,gBAAgB,YAAY,IAAI,KAAK,SAAU,QAAQ;AACzD,aAAO,WAAW;AAAA,IACpB,CAAC,GAAG;AACF,aAAO;AAAA,IACT;AAEA,oBAAgB,YAAY,IAAI,KAAK,KAAK;AAE1C,QAAI,kBAAkB,KAAK,iBAAiB,OAAO,QAAQ,GAAG;AAE9D,WAAO,KAAK,KAAK,MAAM,EAAE,QAAQ,SAAUF,MAAK;AAC9C,UAAI,gBAAgB,eAAeA,IAAG,KAAK,OAAO,gBAAgBA,UAAS,UAAU;AACnF,YAAIH,UAAS,MAAM,OAAOG;AAC1B,YAAI,iBAAiB,OAAOH,YAAW,aAAaA,QAAO,KAAK,IAAIA;AACpE,wBAAgBG,QAAOE,OAAM,gBAAgBF,OAAM,iBAAiBA,MAAK,gBAAgB,WAAW,eAAe;AAAA,MACrH;AAAA,IACF,CAAC;AACD,cAAU,MAAM,iBAAiB,OAAO,QAAQ,GAAG;AACnD,WAAO;AAAA,EACT;AAEA,SAAO,cAAc,SAASG,aAAY,QAAQ,SAAS;AACzD,QAAI,SAAS;AAEb,QAAI,YAAY,MAAM,GAAG;AACvB,aAAO,qBAAqB,KAAK,QAAQ,QAAQ,OAAO;AAAA,IAC1D;AAEA,WAAO,KAAK,KAAK,MAAM,EAAE,QAAQ,SAAU,KAAK;AAC9C,UAAI,OAAO,eAAe,GAAG,GAAG;AAC9B,YAAIN,UAAS,OAAO,OAAO;AAC3B,eAAO,OAAO,QAAQ,OAAO,MAAMA,OAAM;AAAA,MAC3C;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAEA,eAAaE,eAAc,CAAC;AAAA,IAC1B,KAAK;AAAA,IACL,KAAK,SAAS,MAAM;AAClB,aAAO,KAAK;AAAA,IACd;AAAA,EACF,GAAG;AAAA,IACD,KAAK;AAAA,IACL,KAAK,SAAS,MAAM;AAClB,aAAO,KAAK;AAAA,IACd;AAAA,EACF,CAAC,CAAC;AAEF,SAAOA;AACT,EAAE;AAEF,IAAI,oBAAiC,WAAY;AAC/C,WAASK,mBAAkB,YAAY,iBAAiB;AACtD,QAAI,iBAAiB;AACnB,WAAK,mBAAmB,OAAO,oBAAoB,WAAW,SAAU,OAAO;AAC7E,eAAO,MAAM;AAAA,MACf,IAAI;AAAA,IACN;AAEA,SAAK,OAAO,UAAU;AAAA,EACxB;AAEA,MAAI,SAASA,mBAAkB;AAE/B,SAAO,SAAS,SAAS,OAAO,YAAY;AAC1C,SAAK,SAAS;AAAA,EAChB;AAEA,SAAO,qBAAqB,SAAS,mBAAmB,OAAO,QAAQ,KAAK;AAC1E,WAAO,CAAC,KAAK,kBAAkB,KAAK,iBAAiB,OAAO,QAAQ,GAAG;AAAA,EACzE;AAEA,SAAO,cAAc,SAAS,YAAY,OAAO,QAAQ,KAAK;AAC5D,QAAI,KAAK,gBAAgB;AACvB,aAAO,KAAK;AAAA,IACd;AAEA,QAAI,OAAO,KAAK,mBAAmB,OAAO,QAAQ,GAAG;AACrD,WAAO,KAAK,OAAO;AAAA,EACrB;AAEA,SAAO,iBAAiB,SAAS,eAAe,OAAO,QAAQ,KAAKF,QAAO,WAAW,iBAAiB;AACrG,QAAIL,UAAS,KAAK,YAAY,OAAO,QAAQ,GAAG;AAEhD,QAAI,CAACA,SAAQ;AACX,aAAO;AAAA,IACT;AAEA,QAAI,kBAAkBK,OAAM,OAAO,QAAQ,KAAKL,SAAQ,WAAW,eAAe;AAClF,WAAO,KAAK,kBAAkB,oBAAoB,UAAa,oBAAoB,OAAO,kBAAkB;AAAA,MAC1G,IAAI;AAAA,MACJ,QAAQ,KAAK,mBAAmB,OAAO,QAAQ,GAAG;AAAA,IACpD;AAAA,EACF;AAEA,SAAO,mBAAmB,SAAS,iBAAiB,OAAO,SAAS;AAClE,QAAI,YAAY,YAAY,KAAK,IAAI,MAAM,IAAI,QAAQ,IAAI,MAAM;AAEjE,QAAI,CAAC,KAAK,kBAAkB,CAAC,WAAW;AACtC,aAAO;AAAA,IACT;AAEA,QAAI,KAAK,KAAK,iBAAiB,SAAY,YAAY,KAAK,IAAI,MAAM,IAAI,IAAI,IAAI,MAAM;AACxF,QAAIA,UAAS,KAAK,iBAAiB,KAAK,SAAS,KAAK,OAAO;AAC7D,WAAO,QAAQ,MAAM,OAAOA,OAAM;AAAA,EACpC;AAEA,eAAaO,oBAAmB,CAAC;AAAA,IAC/B,KAAK;AAAA,IACL,KAAK,SAAS,MAAM;AAClB,aAAO,CAAC,KAAK;AAAA,IACf;AAAA,EACF,CAAC,CAAC;AAEF,SAAOA;AACT,EAAE;AAEF,IAAI,cAA2B,SAAU,oBAAoB;AAC3D,iBAAeC,cAAa,kBAAkB;AAE9C,WAASA,aAAY,YAAY,iBAAiB;AAChD,QAAI,CAAC,iBAAiB;AACpB,YAAM,IAAI,MAAM,6DAA6D;AAAA,IAC/E;AAEA,WAAO,mBAAmB,KAAK,MAAM,YAAY,eAAe,KAAK;AAAA,EACvE;AAEA,MAAI,SAASA,aAAY;AAEzB,SAAO,YAAY,SAASJ,WAAU,OAAO,QAAQ,KAAKC,QAAO,WAAW,iBAAiB;AAC3F,WAAO,KAAK,eAAe,OAAO,QAAQ,KAAKA,QAAO,WAAW,eAAe;AAAA,EAClF;AAEA,SAAO,cAAc,SAASC,aAAY,OAAO,SAAS;AACxD,WAAO,KAAK,iBAAiB,OAAO,OAAO;AAAA,EAC7C;AAEA,SAAOE;AACT,EAAE,iBAAiB;AAEnB,IAAI,eAA4B,SAAU,oBAAoB;AAC5D,iBAAeC,eAAc,kBAAkB;AAE/C,WAASA,gBAAe;AACtB,WAAO,mBAAmB,MAAM,MAAM,SAAS,KAAK;AAAA,EACtD;AAEA,MAAI,SAASA,cAAa;AAE1B,SAAO,YAAY,SAASL,WAAU,OAAO,QAAQ,KAAKC,QAAO,WAAW,iBAAiB;AAC3F,QAAI,QAAQ;AAEZ,WAAO,OAAO,KAAK,KAAK,EAAE,OAAO,SAAU,QAAQF,MAAK,OAAO;AAC7D,UAAI;AAEJ,UAAI,QAAQ,MAAMA;AAClB,aAAO,UAAU,UAAa,UAAU,OAAO,SAAS,CAAC,GAAG,SAAS,YAAY,CAAC,GAAG,UAAUA,QAAO,MAAM,eAAe,OAAO,OAAOA,MAAKE,QAAO,WAAW,eAAe,GAAG,UAAU,IAAI;AAAA,IAClM,GAAG,CAAC,CAAC;AAAA,EACP;AAEA,SAAO,cAAc,SAASC,aAAY,OAAO,SAAS;AACxD,QAAI,SAAS;AAEb,WAAO,OAAO,KAAK,KAAK,EAAE,OAAO,SAAU,QAAQ,KAAK;AACtD,UAAI;AAEJ,UAAI,aAAa,MAAM;AACvB,aAAO,SAAS,CAAC,GAAG,SAAS,YAAY,CAAC,GAAG,UAAU,OAAO,OAAO,iBAAiB,YAAY,OAAO,GAAG,UAAU;AAAA,IACxH,GAAG,CAAC,CAAC;AAAA,EACP;AAEA,SAAOG;AACT,EAAE,iBAAiB;AAEnB,IAAI,iBAAiB,SAASC,gBAAe,YAAY;AACvD,MAAI,UAAU,MAAM,QAAQ,UAAU;AAEtC,MAAI,WAAW,WAAW,SAAS,GAAG;AACpC,UAAM,IAAI,MAAM,iEAAiE,WAAW,SAAS,GAAG;AAAA,EAC1G;AAEA,SAAO,WAAW;AACpB;AAEA,IAAI,YAAY,SAASC,WAAU,OAAO;AACxC,SAAO,MAAM,QAAQ,KAAK,IAAI,QAAQ,OAAO,KAAK,KAAK,EAAE,IAAI,SAAU,KAAK;AAC1E,WAAO,MAAM;AAAA,EACf,CAAC;AACH;AAEA,IAAI,YAAY,SAASP,WAAUJ,SAAQ,OAAO,QAAQ,KAAKK,QAAO,WAAW,iBAAiB;AAChG,EAAAL,UAAS,eAAeA,OAAM;AAC9B,MAAI,SAAS,UAAU,KAAK;AAG5B,SAAO,OAAO,IAAI,SAAU,OAAO,OAAO;AACxC,WAAOK,OAAM,OAAO,QAAQ,KAAKL,SAAQ,WAAW,eAAe;AAAA,EACrE,CAAC;AACH;AACA,IAAI,cAAc,SAASM,aAAYN,SAAQ,OAAO,SAAS;AAC7D,EAAAA,UAAS,eAAeA,OAAM;AAC9B,SAAO,SAAS,MAAM,MAAM,MAAM,IAAI,SAAU,YAAY;AAC1D,WAAO,QAAQ,YAAYA,OAAM;AAAA,EACnC,CAAC,IAAI;AACP;AAEA,IAAI,cAA2B,SAAU,oBAAoB;AAC3D,iBAAeY,cAAa,kBAAkB;AAE9C,WAASA,eAAc;AACrB,WAAO,mBAAmB,MAAM,MAAM,SAAS,KAAK;AAAA,EACtD;AAEA,MAAI,SAASA,aAAY;AAEzB,SAAO,YAAY,SAASR,WAAU,OAAO,QAAQ,KAAKC,QAAO,WAAW,iBAAiB;AAC3F,QAAI,QAAQ;AAEZ,QAAI,SAAS,UAAU,KAAK;AAC5B,WAAO,OAAO,IAAI,SAAU,OAAO,OAAO;AACxC,aAAO,MAAM,eAAe,OAAO,QAAQ,KAAKA,QAAO,WAAW,eAAe;AAAA,IACnF,CAAC,EAAE,OAAO,SAAU,OAAO;AACzB,aAAO,UAAU,UAAa,UAAU;AAAA,IAC1C,CAAC;AAAA,EACH;AAEA,SAAO,cAAc,SAASC,aAAY,OAAO,SAAS;AACxD,QAAI,SAAS;AAEb,WAAO,SAAS,MAAM,MAAM,MAAM,IAAI,SAAU,OAAO;AACrD,aAAO,OAAO,iBAAiB,OAAO,OAAO;AAAA,IAC/C,CAAC,IAAI;AAAA,EACP;AAEA,SAAOM;AACT,EAAE,iBAAiB;AAEnB,IAAI,aAAa,SAASR,WAAUJ,SAAQ,OAAO,QAAQ,KAAKK,QAAO,WAAW,iBAAiB;AACjG,MAAI,SAAS,SAAS,CAAC,GAAG,KAAK;AAE/B,SAAO,KAAKL,OAAM,EAAE,QAAQ,SAAUG,MAAK;AACzC,QAAI,cAAcH,QAAOG;AACzB,QAAI,sBAAsB,OAAO,gBAAgB,aAAa,YAAY,KAAK,IAAI;AACnF,QAAI,QAAQE,OAAM,MAAMF,OAAM,OAAOA,MAAK,qBAAqB,WAAW,eAAe;AAEzF,QAAI,UAAU,UAAa,UAAU,MAAM;AACzC,aAAO,OAAOA;AAAA,IAChB,OAAO;AACL,aAAOA,QAAO;AAAA,IAChB;AAAA,EACF,CAAC;AACD,SAAO;AACT;AAEA,IAAI,eAAe,SAASG,aAAYN,SAAQ,OAAO,SAAS;AAC9D,MAAI,YAAY,KAAK,GAAG;AACtB,WAAO,qBAAqBA,SAAQ,OAAO,OAAO;AAAA,EACpD;AAEA,MAAI,SAAS,SAAS,CAAC,GAAG,KAAK;AAE/B,SAAO,KAAKA,OAAM,EAAE,QAAQ,SAAU,KAAK;AACzC,QAAI,OAAO,QAAQ,MAAM;AACvB,aAAO,OAAO,QAAQ,OAAO,MAAMA,QAAO,IAAI;AAAA,IAChD;AAAA,EACF,CAAC;AACD,SAAO;AACT;AAEA,IAAI,eAA4B,WAAY;AAC1C,WAASa,cAAa,YAAY;AAChC,SAAK,OAAO,UAAU;AAAA,EACxB;AAEA,MAAI,SAASA,cAAa;AAE1B,SAAO,SAAS,SAAS,OAAO,YAAY;AAC1C,SAAK,SAAS,OAAO,KAAK,UAAU,EAAE,OAAO,SAAU,cAAc,KAAK;AACxE,UAAI;AAEJ,UAAIb,UAAS,WAAW;AACxB,aAAO,SAAS,CAAC,GAAG,eAAe,YAAY,CAAC,GAAG,UAAU,OAAOA,SAAQ,UAAU;AAAA,IACxF,GAAG,KAAK,UAAU,CAAC,CAAC;AAAA,EACtB;AAEA,SAAO,YAAY,SAASI,aAAY;AACtC,aAAS,OAAO,UAAU,QAAQ,OAAO,IAAI,MAAM,IAAI,GAAG,OAAO,GAAG,OAAO,MAAM,QAAQ;AACvF,WAAK,QAAQ,UAAU;AAAA,IACzB;AAEA,WAAO,WAAW,MAAM,QAAQ,CAAC,KAAK,MAAM,EAAE,OAAO,IAAI,CAAC;AAAA,EAC5D;AAEA,SAAO,cAAc,SAASE,eAAc;AAC1C,aAAS,QAAQ,UAAU,QAAQ,OAAO,IAAI,MAAM,KAAK,GAAG,QAAQ,GAAG,QAAQ,OAAO,SAAS;AAC7F,WAAK,SAAS,UAAU;AAAA,IAC1B;AAEA,WAAO,aAAa,MAAM,QAAQ,CAAC,KAAK,MAAM,EAAE,OAAO,IAAI,CAAC;AAAA,EAC9D;AAEA,SAAOO;AACT,EAAE;AAEF,IAAI,QAAQ,SAASR,OAAM,OAAO,QAAQ,KAAKL,SAAQ,WAAW,iBAAiB;AACjF,MAAI,OAAO,UAAU,YAAY,CAAC,OAAO;AACvC,WAAO;AAAA,EACT;AAEA,MAAI,OAAOA,YAAW,aAAa,CAACA,QAAO,aAAa,OAAOA,QAAO,cAAc,aAAa;AAC/F,QAAI,SAAS,MAAM,QAAQA,OAAM,IAAI,YAAY;AACjD,WAAO,OAAOA,SAAQ,OAAO,QAAQ,KAAKK,QAAO,WAAW,eAAe;AAAA,EAC7E;AAEA,SAAOL,QAAO,UAAU,OAAO,QAAQ,KAAKK,QAAO,WAAW,eAAe;AAC/E;AAEA,IAAI,cAAc,SAASS,aAAY,UAAU;AAC/C,SAAO,SAAUd,SAAQ,iBAAiB,OAAO,QAAQ,KAAK;AAC5D,QAAI,YAAYA,QAAO;AACvB,QAAI,KAAKA,QAAO,MAAM,OAAO,QAAQ,GAAG;AAExC,QAAI,EAAE,aAAa,WAAW;AAC5B,eAAS,aAAa,CAAC;AAAA,IACzB;AAEA,QAAI,iBAAiB,SAAS,WAAW;AAEzC,QAAI,gBAAgB;AAClB,eAAS,WAAW,MAAMA,QAAO,MAAM,gBAAgB,eAAe;AAAA,IACxE,OAAO;AACL,eAAS,WAAW,MAAM;AAAA,IAC5B;AAAA,EACF;AACF;AAEA,IAAI,SAAS;AAAA,EACX,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,QAAQ;AACV;AACA,IAAI,cAAc,SAASI,WAAU,OAAOJ,SAAQ;AAClD,MAAI,CAAC,SAAS,OAAO,UAAU,UAAU;AACvC,UAAM,IAAI,MAAM,gFAAmF,UAAU,OAAO,SAAS,OAAO,SAAS,IAAK;AAAA,EACpJ;AAEA,MAAI,WAAW,CAAC;AAChB,MAAI,YAAY,YAAY,QAAQ;AACpC,MAAI,kBAAkB,CAAC;AACvB,MAAI,SAAS,MAAM,OAAO,OAAO,MAAMA,SAAQ,WAAW,eAAe;AACzE,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAEA,IAAI,gBAAgB,SAASe,eAAc,IAAIf,SAAQ,SAAS,WAAW,OAAO;AAChF,MAAI,SAAS,UAAU,IAAIA,OAAM;AAEjC,MAAI,WAAW,UAAaA,mBAAkB,cAAc;AAC1D,aAASA,QAAO,SAAS,IAAIA,OAAM;AAAA,EACrC;AAEA,MAAI,OAAO,WAAW,YAAY,WAAW,MAAM;AACjD,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,MAAMA,QAAO,MAAM;AACtB,UAAMA,QAAO,OAAO,CAAC;AAAA,EACvB;AAEA,MAAI,CAAC,MAAMA,QAAO,KAAK,KAAK;AAE1B,QAAI,aAAa,YAAY,MAAM,IAAI,SAAS,SAAS,CAAC,GAAG,MAAM;AAGnE,UAAMA,QAAO,KAAK,MAAM;AACxB,UAAMA,QAAO,KAAK,MAAMA,QAAO,YAAY,YAAY,OAAO;AAAA,EAChE;AAEA,SAAO,MAAMA,QAAO,KAAK;AAC3B;AAEA,IAAI,aAAa,SAASgB,YAAW,UAAU;AAC7C,MAAI,QAAQ,CAAC;AACb,MAAI,YAAY,YAAY,QAAQ;AACpC,SAAO,SAAS,QAAQ,OAAOhB,SAAQ;AACrC,QAAI,OAAOA,YAAW,aAAa,CAACA,QAAO,eAAe,OAAOA,QAAO,gBAAgB,aAAa;AACnG,UAAI,SAAS,MAAM,QAAQA,OAAM,IAAI,cAAc;AACnD,aAAO,OAAOA,SAAQ,OAAO,OAAO;AAAA,IACtC;AAEA,QAAI,UAAU,UAAa,UAAU,MAAM;AACzC,aAAO;AAAA,IACT;AAEA,QAAIA,mBAAkB,cAAc;AAClC,aAAO,cAAc,OAAOA,SAAQ,SAAS,WAAW,KAAK;AAAA,IAC/D;AAEA,WAAOA,QAAO,YAAY,OAAO,OAAO;AAAA,EAC1C;AACF;AAEA,IAAI,cAAc,SAASiB,aAAY,UAAU;AAC/C,MAAI,gBAAgB,YAAY,QAAQ;AACxC,SAAO,SAAU,YAAYjB,SAAQ;AACnC,QAAI,YAAYA,QAAO;AAEvB,QAAI,OAAO,eAAe,UAAU;AAClC,aAAO;AAAA,IACT;AAEA,QAAI,eAAe;AACjB,aAAO,SAAS,MAAM,CAAC,WAAW,WAAW,SAAS,CAAC,CAAC;AAAA,IAC1D;AAEA,WAAO,SAAS,cAAc,SAAS,WAAW;AAAA,EACpD;AACF;AAEA,IAAI,gBAAgB,SAASM,aAAY,OAAON,SAAQ,UAAU;AAChE,MAAI,OAAO,UAAU,aAAa;AAChC,WAAO,WAAW,QAAQ,EAAE,OAAOA,OAAM;AAAA,EAC3C;AACF;",
  "names": ["schema", "getDefaultGetId", "EntitySchema", "key", "normalize", "visit", "denormalize", "PolymorphicSchema", "UnionSchema", "ValuesSchema", "validateSchema", "getValues", "ArraySchema", "ObjectSchema", "addEntities", "unvisitEntity", "getUnvisit", "getEntities"]
}
