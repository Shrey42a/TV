import "./chunk-TWLJ45QX.js";

// node_modules/normalizr/dist/normalizr.es.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}
function isImmutable(object) {
  return !!(object && typeof object.hasOwnProperty === "function" && (object.hasOwnProperty("__ownerID") || object._map && object._map.hasOwnProperty("__ownerID")));
}
function denormalizeImmutable(schema2, input, unvisit) {
  return Object.keys(schema2).reduce(function(object, key) {
    var stringKey = "" + key;
    if (object.has(stringKey)) {
      return object.set(stringKey, unvisit(object.get(stringKey), schema2[stringKey]));
    } else {
      return object;
    }
  }, input);
}
var getDefaultGetId = function getDefaultGetId2(idAttribute) {
  return function(input) {
    return isImmutable(input) ? input.get(idAttribute) : input[idAttribute];
  };
};
var EntitySchema = function() {
  function EntitySchema2(key, definition, options) {
    if (definition === void 0) {
      definition = {};
    }
    if (options === void 0) {
      options = {};
    }
    if (!key || typeof key !== "string") {
      throw new Error("Expected a string key for Entity, but found " + key + ".");
    }
    var _options = options, _options$idAttribute = _options.idAttribute, idAttribute = _options$idAttribute === void 0 ? "id" : _options$idAttribute, _options$mergeStrateg = _options.mergeStrategy, mergeStrategy = _options$mergeStrateg === void 0 ? function(entityA, entityB) {
      return _extends({}, entityA, entityB);
    } : _options$mergeStrateg, _options$processStrat = _options.processStrategy, processStrategy = _options$processStrat === void 0 ? function(input) {
      return _extends({}, input);
    } : _options$processStrat, _options$fallbackStra = _options.fallbackStrategy, fallbackStrategy = _options$fallbackStra === void 0 ? function(key2, schema2) {
      return void 0;
    } : _options$fallbackStra;
    this._key = key;
    this._getId = typeof idAttribute === "function" ? idAttribute : getDefaultGetId(idAttribute);
    this._idAttribute = idAttribute;
    this._mergeStrategy = mergeStrategy;
    this._processStrategy = processStrategy;
    this._fallbackStrategy = fallbackStrategy;
    this.define(definition);
  }
  var _proto = EntitySchema2.prototype;
  _proto.define = function define(definition) {
    this.schema = Object.keys(definition).reduce(function(entitySchema, key) {
      var _extends2;
      var schema2 = definition[key];
      return _extends({}, entitySchema, (_extends2 = {}, _extends2[key] = schema2, _extends2));
    }, this.schema || {});
  };
  _proto.getId = function getId(input, parent, key) {
    return this._getId(input, parent, key);
  };
  _proto.merge = function merge(entityA, entityB) {
    return this._mergeStrategy(entityA, entityB);
  };
  _proto.fallback = function fallback(id, schema2) {
    return this._fallbackStrategy(id, schema2);
  };
  _proto.normalize = function normalize5(input, parent, key, visit3, addEntity, visitedEntities) {
    var _this = this;
    var id = this.getId(input, parent, key);
    var entityType = this.key;
    if (!(entityType in visitedEntities)) {
      visitedEntities[entityType] = {};
    }
    if (!(id in visitedEntities[entityType])) {
      visitedEntities[entityType][id] = [];
    }
    if (visitedEntities[entityType][id].some(function(entity) {
      return entity === input;
    })) {
      return id;
    }
    visitedEntities[entityType][id].push(input);
    var processedEntity = this._processStrategy(input, parent, key);
    Object.keys(this.schema).forEach(function(key2) {
      if (processedEntity.hasOwnProperty(key2) && typeof processedEntity[key2] === "object") {
        var schema2 = _this.schema[key2];
        var resolvedSchema = typeof schema2 === "function" ? schema2(input) : schema2;
        processedEntity[key2] = visit3(processedEntity[key2], processedEntity, key2, resolvedSchema, addEntity, visitedEntities);
      }
    });
    addEntity(this, processedEntity, input, parent, key);
    return id;
  };
  _proto.denormalize = function denormalize5(entity, unvisit) {
    var _this2 = this;
    if (isImmutable(entity)) {
      return denormalizeImmutable(this.schema, entity, unvisit);
    }
    Object.keys(this.schema).forEach(function(key) {
      if (entity.hasOwnProperty(key)) {
        var schema2 = _this2.schema[key];
        entity[key] = unvisit(entity[key], schema2);
      }
    });
    return entity;
  };
  _createClass(EntitySchema2, [{
    key: "key",
    get: function get() {
      return this._key;
    }
  }, {
    key: "idAttribute",
    get: function get() {
      return this._idAttribute;
    }
  }]);
  return EntitySchema2;
}();
var PolymorphicSchema = function() {
  function PolymorphicSchema2(definition, schemaAttribute) {
    if (schemaAttribute) {
      this._schemaAttribute = typeof schemaAttribute === "string" ? function(input) {
        return input[schemaAttribute];
      } : schemaAttribute;
    }
    this.define(definition);
  }
  var _proto = PolymorphicSchema2.prototype;
  _proto.define = function define(definition) {
    this.schema = definition;
  };
  _proto.getSchemaAttribute = function getSchemaAttribute(input, parent, key) {
    return !this.isSingleSchema && this._schemaAttribute(input, parent, key);
  };
  _proto.inferSchema = function inferSchema(input, parent, key) {
    if (this.isSingleSchema) {
      return this.schema;
    }
    var attr = this.getSchemaAttribute(input, parent, key);
    return this.schema[attr];
  };
  _proto.normalizeValue = function normalizeValue(value, parent, key, visit3, addEntity, visitedEntities) {
    var schema2 = this.inferSchema(value, parent, key);
    if (!schema2) {
      return value;
    }
    var normalizedValue = visit3(value, parent, key, schema2, addEntity, visitedEntities);
    return this.isSingleSchema || normalizedValue === void 0 || normalizedValue === null ? normalizedValue : {
      id: normalizedValue,
      schema: this.getSchemaAttribute(value, parent, key)
    };
  };
  _proto.denormalizeValue = function denormalizeValue(value, unvisit) {
    var schemaKey = isImmutable(value) ? value.get("schema") : value.schema;
    if (!this.isSingleSchema && !schemaKey) {
      return value;
    }
    var id = this.isSingleSchema ? void 0 : isImmutable(value) ? value.get("id") : value.id;
    var schema2 = this.isSingleSchema ? this.schema : this.schema[schemaKey];
    return unvisit(id || value, schema2);
  };
  _createClass(PolymorphicSchema2, [{
    key: "isSingleSchema",
    get: function get() {
      return !this._schemaAttribute;
    }
  }]);
  return PolymorphicSchema2;
}();
var UnionSchema = function(_PolymorphicSchema) {
  _inheritsLoose(UnionSchema2, _PolymorphicSchema);
  function UnionSchema2(definition, schemaAttribute) {
    if (!schemaAttribute) {
      throw new Error('Expected option "schemaAttribute" not found on UnionSchema.');
    }
    return _PolymorphicSchema.call(this, definition, schemaAttribute) || this;
  }
  var _proto = UnionSchema2.prototype;
  _proto.normalize = function normalize5(input, parent, key, visit3, addEntity, visitedEntities) {
    return this.normalizeValue(input, parent, key, visit3, addEntity, visitedEntities);
  };
  _proto.denormalize = function denormalize5(input, unvisit) {
    return this.denormalizeValue(input, unvisit);
  };
  return UnionSchema2;
}(PolymorphicSchema);
var ValuesSchema = function(_PolymorphicSchema) {
  _inheritsLoose(ValuesSchema2, _PolymorphicSchema);
  function ValuesSchema2() {
    return _PolymorphicSchema.apply(this, arguments) || this;
  }
  var _proto = ValuesSchema2.prototype;
  _proto.normalize = function normalize5(input, parent, key, visit3, addEntity, visitedEntities) {
    var _this = this;
    return Object.keys(input).reduce(function(output, key2, index) {
      var _extends2;
      var value = input[key2];
      return value !== void 0 && value !== null ? _extends({}, output, (_extends2 = {}, _extends2[key2] = _this.normalizeValue(value, input, key2, visit3, addEntity, visitedEntities), _extends2)) : output;
    }, {});
  };
  _proto.denormalize = function denormalize5(input, unvisit) {
    var _this2 = this;
    return Object.keys(input).reduce(function(output, key) {
      var _extends3;
      var entityOrId = input[key];
      return _extends({}, output, (_extends3 = {}, _extends3[key] = _this2.denormalizeValue(entityOrId, unvisit), _extends3));
    }, {});
  };
  return ValuesSchema2;
}(PolymorphicSchema);
var validateSchema = function validateSchema2(definition) {
  var isArray = Array.isArray(definition);
  if (isArray && definition.length > 1) {
    throw new Error("Expected schema definition to be a single schema, but found " + definition.length + ".");
  }
  return definition[0];
};
var getValues = function getValues2(input) {
  return Array.isArray(input) ? input : Object.keys(input).map(function(key) {
    return input[key];
  });
};
var normalize = function normalize2(schema2, input, parent, key, visit3, addEntity, visitedEntities) {
  schema2 = validateSchema(schema2);
  var values = getValues(input);
  return values.map(function(value, index) {
    return visit3(value, parent, key, schema2, addEntity, visitedEntities);
  });
};
var denormalize = function denormalize2(schema2, input, unvisit) {
  schema2 = validateSchema(schema2);
  return input && input.map ? input.map(function(entityOrId) {
    return unvisit(entityOrId, schema2);
  }) : input;
};
var ArraySchema = function(_PolymorphicSchema) {
  _inheritsLoose(ArraySchema2, _PolymorphicSchema);
  function ArraySchema2() {
    return _PolymorphicSchema.apply(this, arguments) || this;
  }
  var _proto = ArraySchema2.prototype;
  _proto.normalize = function normalize5(input, parent, key, visit3, addEntity, visitedEntities) {
    var _this = this;
    var values = getValues(input);
    return values.map(function(value, index) {
      return _this.normalizeValue(value, parent, key, visit3, addEntity, visitedEntities);
    }).filter(function(value) {
      return value !== void 0 && value !== null;
    });
  };
  _proto.denormalize = function denormalize5(input, unvisit) {
    var _this2 = this;
    return input && input.map ? input.map(function(value) {
      return _this2.denormalizeValue(value, unvisit);
    }) : input;
  };
  return ArraySchema2;
}(PolymorphicSchema);
var _normalize = function normalize3(schema2, input, parent, key, visit3, addEntity, visitedEntities) {
  var object = _extends({}, input);
  Object.keys(schema2).forEach(function(key2) {
    var localSchema = schema2[key2];
    var resolvedLocalSchema = typeof localSchema === "function" ? localSchema(input) : localSchema;
    var value = visit3(input[key2], input, key2, resolvedLocalSchema, addEntity, visitedEntities);
    if (value === void 0 || value === null) {
      delete object[key2];
    } else {
      object[key2] = value;
    }
  });
  return object;
};
var _denormalize = function denormalize3(schema2, input, unvisit) {
  if (isImmutable(input)) {
    return denormalizeImmutable(schema2, input, unvisit);
  }
  var object = _extends({}, input);
  Object.keys(schema2).forEach(function(key) {
    if (object[key] != null) {
      object[key] = unvisit(object[key], schema2[key]);
    }
  });
  return object;
};
var ObjectSchema = function() {
  function ObjectSchema2(definition) {
    this.define(definition);
  }
  var _proto = ObjectSchema2.prototype;
  _proto.define = function define(definition) {
    this.schema = Object.keys(definition).reduce(function(entitySchema, key) {
      var _extends2;
      var schema2 = definition[key];
      return _extends({}, entitySchema, (_extends2 = {}, _extends2[key] = schema2, _extends2));
    }, this.schema || {});
  };
  _proto.normalize = function normalize5() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return _normalize.apply(void 0, [this.schema].concat(args));
  };
  _proto.denormalize = function denormalize5() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    return _denormalize.apply(void 0, [this.schema].concat(args));
  };
  return ObjectSchema2;
}();
var visit = function visit2(value, parent, key, schema2, addEntity, visitedEntities) {
  if (typeof value !== "object" || !value) {
    return value;
  }
  if (typeof schema2 === "object" && (!schema2.normalize || typeof schema2.normalize !== "function")) {
    var method = Array.isArray(schema2) ? normalize : _normalize;
    return method(schema2, value, parent, key, visit2, addEntity, visitedEntities);
  }
  return schema2.normalize(value, parent, key, visit2, addEntity, visitedEntities);
};
var addEntities = function addEntities2(entities) {
  return function(schema2, processedEntity, value, parent, key) {
    var schemaKey = schema2.key;
    var id = schema2.getId(value, parent, key);
    if (!(schemaKey in entities)) {
      entities[schemaKey] = {};
    }
    var existingEntity = entities[schemaKey][id];
    if (existingEntity) {
      entities[schemaKey][id] = schema2.merge(existingEntity, processedEntity);
    } else {
      entities[schemaKey][id] = processedEntity;
    }
  };
};
var schema = {
  Array: ArraySchema,
  Entity: EntitySchema,
  Object: ObjectSchema,
  Union: UnionSchema,
  Values: ValuesSchema
};
var normalize$1 = function normalize4(input, schema2) {
  if (!input || typeof input !== "object") {
    throw new Error('Unexpected input given to normalize. Expected type to be "object", found "' + (input === null ? "null" : typeof input) + '".');
  }
  var entities = {};
  var addEntity = addEntities(entities);
  var visitedEntities = {};
  var result = visit(input, input, null, schema2, addEntity, visitedEntities);
  return {
    entities,
    result
  };
};
var unvisitEntity = function unvisitEntity2(id, schema2, unvisit, getEntity, cache) {
  var entity = getEntity(id, schema2);
  if (entity === void 0 && schema2 instanceof EntitySchema) {
    entity = schema2.fallback(id, schema2);
  }
  if (typeof entity !== "object" || entity === null) {
    return entity;
  }
  if (!cache[schema2.key]) {
    cache[schema2.key] = {};
  }
  if (!cache[schema2.key][id]) {
    var entityCopy = isImmutable(entity) ? entity : _extends({}, entity);
    cache[schema2.key][id] = entityCopy;
    cache[schema2.key][id] = schema2.denormalize(entityCopy, unvisit);
  }
  return cache[schema2.key][id];
};
var getUnvisit = function getUnvisit2(entities) {
  var cache = {};
  var getEntity = getEntities(entities);
  return function unvisit(input, schema2) {
    if (typeof schema2 === "object" && (!schema2.denormalize || typeof schema2.denormalize !== "function")) {
      var method = Array.isArray(schema2) ? denormalize : _denormalize;
      return method(schema2, input, unvisit);
    }
    if (input === void 0 || input === null) {
      return input;
    }
    if (schema2 instanceof EntitySchema) {
      return unvisitEntity(input, schema2, unvisit, getEntity, cache);
    }
    return schema2.denormalize(input, unvisit);
  };
};
var getEntities = function getEntities2(entities) {
  var isImmutable$1 = isImmutable(entities);
  return function(entityOrId, schema2) {
    var schemaKey = schema2.key;
    if (typeof entityOrId === "object") {
      return entityOrId;
    }
    if (isImmutable$1) {
      return entities.getIn([schemaKey, entityOrId.toString()]);
    }
    return entities[schemaKey] && entities[schemaKey][entityOrId];
  };
};
var denormalize$1 = function denormalize4(input, schema2, entities) {
  if (typeof input !== "undefined") {
    return getUnvisit(entities)(input, schema2);
  }
};
export {
  denormalize$1 as denormalize,
  normalize$1 as normalize,
  schema
};
//# sourceMappingURL=normalizr.js.map
